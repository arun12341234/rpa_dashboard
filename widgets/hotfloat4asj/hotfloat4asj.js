// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Dashing.Hotfloat4asj = (function(superClass) {
    extend(Hotfloat4asj, superClass);

    function Hotfloat4asj() {
      return Hotfloat4asj.__super__.constructor.apply(this, arguments);
    }

    Hotfloat4asj.accessor('current', Dashing.AnimatedValue);

    Hotfloat4asj.accessor('difference', function() {
      var current, diff, last;
      if (this.get('last')) {
        last = parseFloat(this.get('last'));
        current = parseFloat(this.get('current'));
        if (last !== 0) {
          diff = Math.abs(current - last);
          return diff + "%p";
        }
      } else {
        return "";
      }
    });

    Hotfloat4asj.accessor('arrow', function() {
      if (this.get('last') && parseFloat(this.get('current')) !== parseFloat(this.get('last'))) {
        if (parseFloat(this.get('current')) > parseFloat(this.get('last'))) {
          return 'fa fa-arrow-up';
        } else {
          return 'fa fa-arrow-down';
        }
      }
    });

    Hotfloat4asj.prototype.mixin = function(data) {
      if (data != null) {
        this.updateColor(data);
      }
      return Hotfloat4asj.__super__.mixin.call(this, data);
    };

    Hotfloat4asj.prototype.onData = function(data) {
      if (data.status) {
        $(this.get('node')).attr('class', function(i, c) {
          return c.replace(/\bstatus-\S+/g, '');
        });
        $(this.get('node')).addClass("status-" + data.status);
        return this.updateColor(data);
      }
    };

    Hotfloat4asj.prototype.updateColor = function(data) {
      var backgroundClass, cool, currentVal, lastClass, level, node, warm;
      if (data.current != null) {
        node = $(this.node);
        currentVal = parseFloat(data.current);
        cool = parseFloat(node.data("cool"));
        warm = parseFloat(node.data("warm"));
        if (warm >= cool) {
          level = (function() {
            switch (false) {
              case !(currentVal <= cool):
                return 0;
              case !(currentVal >= warm):
                return 4;
              default:
                return 1;
            }
          })();
        } else {
          level = (function() {
            switch (false) {
              case !(currentVal >= cool):
                return 0;
              case !(currentVal <= warm):
                return 2;
              default:
                return 1;
            }
          })();
        }
        backgroundClass = "hotfloat4asj" + level;
        lastClass = this.get("lastClass");
        node.toggleClass(lastClass + " " + backgroundClass);
        return this.set("lastClass", backgroundClass);
      }
    };

    return Hotfloat4asj;

  })(Dashing.Widget);

}).call(this);
